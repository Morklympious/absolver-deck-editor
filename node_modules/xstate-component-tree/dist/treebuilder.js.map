{"version":3,"file":"treebuilder.js","sources":["../src/treebuilder.js"],"sourcesContent":["const loader = async ({ item, key, fn, context, event }) => {\r\n    item[key] = await fn(context, event);\r\n};\r\n\r\nclass ComponentTree {\r\n    constructor(interpreter, callback, options = {}) {\r\n        // Storing off args\r\n        this.interpreter = interpreter;\r\n        this.callback = callback;\r\n        this.options = options;\r\n\r\n        // identifier!\r\n        this._id = interpreter.id;\r\n\r\n        // path -> meta lookup\r\n        this._paths = new Map();\r\n\r\n        // Get goin\r\n        this._prep();\r\n        this._watch();\r\n    }\r\n\r\n    teardown() {\r\n        this._paths.clear();\r\n\r\n        this._unsubscribe();\r\n    }\r\n\r\n    // Walk the machine and build up maps of paths to meta info as\r\n    // well as prepping any load functions for usage later\r\n    _prep() {\r\n        const { _paths } = this;\r\n        const { idMap : ids } = this.interpreter.machine;\r\n\r\n        // xstate maps ids to state nodes, but the value object only\r\n        // has paths, so need to create our own path-only map here\r\n        for(const id in ids) {\r\n            const { path, meta = false } = ids[id];\r\n\r\n            const key = path.join(\".\");\r\n\r\n            if(!meta) {\r\n                continue;\r\n            }\r\n\r\n            const { component, props, load } = meta;\r\n\r\n            _paths.set(key, {\r\n                __proto__ : null,\r\n\r\n                component,\r\n                props,\r\n                load,\r\n            });\r\n        }\r\n    }\r\n\r\n    // Watch the machine for changes\r\n    _watch() {\r\n        const { interpreter } = this;\r\n    \r\n        const { unsubscribe } = interpreter.subscribe(this._state.bind(this));\r\n\r\n        this._unsubscribe = unsubscribe;\r\n\r\n        // In case the machine is already started, run a first pass on it\r\n        if(interpreter.initialized) {\r\n            this._state(interpreter.state);\r\n        }\r\n    }\r\n\r\n    // Walk a machine via BFS, collecting meta information to build a tree\r\n    // eslint-disable-next-line max-statements\r\n    async _walk({ value, context, event }) {\r\n        const { _paths } = this;\r\n        \r\n        const loads = [];\r\n        const tree = {\r\n            __proto__ : null,\r\n            children  : [],\r\n            id        : this._id,\r\n        };\r\n\r\n        // Set up queue for a breadth-first traversal of all active states\r\n        let queue;\r\n\r\n        if(typeof value === \"string\") {\r\n            queue = [[ tree, value, false ]];\r\n        } else {\r\n            queue = Object.entries(value).map(([ child, grandchildren ]) =>\r\n                [ tree, child, grandchildren ]\r\n            );\r\n        }\r\n\r\n        while(queue.length) {\r\n            const [ parent, path, values ] = queue.shift();\r\n\r\n            // Since it can be assigned if we add a new child\r\n            let pointer = parent;\r\n\r\n            if(_paths.has(path)) {\r\n                const { component, props, load } = _paths.get(path);\r\n                const item = {\r\n                    __proto__ : null,\r\n                    children  : [],\r\n                    component : component || false,\r\n                    props     : props || false,\r\n                };\r\n\r\n                // Run load function and assign the response to the component prop\r\n                if(load) {\r\n                    loads.push(loader({\r\n                        item,\r\n                        key : \"component\",\r\n                        fn  : load,\r\n                        context,\r\n                        event,\r\n                    }));\r\n                }\r\n\r\n                // Props as a function means they're dynamic, so run it to get the value\r\n                if(typeof props === \"function\") {\r\n                    loads.push(loader({\r\n                        item,\r\n                        key : \"props\",\r\n                        fn  : props,\r\n                        context,\r\n                        event,\r\n                    }));\r\n                }\r\n\r\n                parent.children.push(item);\r\n\r\n                pointer = item;\r\n            }\r\n\r\n            if(!values) {\r\n                continue;\r\n            }\r\n\r\n            if(typeof values === \"string\") {\r\n                queue.push([ pointer, `${path}.${values}`, false ]);\r\n\r\n                continue;\r\n            }\r\n\r\n            queue.push(...Object.entries(values).map(([ child, grandchildren ]) =>\r\n                [ pointer, `${path}.${child}`, grandchildren ]\r\n            ));\r\n        }\r\n\r\n        // await all the load functions\r\n        await Promise.all(loads);\r\n\r\n        return tree;\r\n    }\r\n    \r\n    // eslint-disable-next-line max-statements\r\n    async _state(state) {\r\n        const { changed, value, context, event } = state;\r\n\r\n        // Need to specifically check for false because this value is undefined\r\n        // when a machine first boots up\r\n        if(changed === false) {\r\n            return;\r\n        }\r\n\r\n        const tree = await this._walk({ value, context, event });\r\n        \r\n        this.callback(tree);\r\n    }\r\n}\r\n\r\nconst treeBuilder = (interpreter, fn) => {\r\n    const machines = new Map();\r\n    const trees = new Map();\r\n\r\n    const root = interpreter.id;\r\n\r\n    const respond = () => {\r\n        fn([ ...trees.values() ]);\r\n    };\r\n\r\n    machines.set(root, new ComponentTree(interpreter, (tree) => {\r\n        trees.set(root, tree);\r\n\r\n        respond();\r\n    }));\r\n\r\n    interpreter.subscribe(({ changed, children }) => {\r\n        if(changed === false) {\r\n            return;\r\n        }\r\n\r\n        // BFS Walk child statecharts, attach subscribers for each of them\r\n        const queue = Object.entries(children);\r\n        \r\n        // Track active ids\r\n        const active = new Set();\r\n\r\n        while(queue.length) {\r\n            const [ id, machine ] = queue.shift();\r\n\r\n            active.add(id);\r\n\r\n            if(machine.initialized && machine.state) {\r\n                machines.set(id, new ComponentTree(machine, (tree) => {\r\n                    trees.set(id, tree);\r\n\r\n                    respond();\r\n                }));\r\n\r\n                queue.push(...Object.entries(machine.state.children));\r\n            }\r\n        }\r\n\r\n        // Remove any no-longer active invoked statecharts from being tracked\r\n        machines.forEach((cancel, id) => {\r\n            if(active.has(id) || id === root) {\r\n                return;\r\n            }\r\n\r\n            machines.get(id).teardown();\r\n            machines.delete(id);\r\n            trees.delete(id);\r\n\r\n            respond();\r\n        });\r\n    });\r\n\r\n    return () => {\r\n        machines.forEach((machine) => machine.teardown());\r\n        machines.clear();\r\n        trees.clear();\r\n    };\r\n};\r\n\r\ntreeBuilder.ComponentTree = ComponentTree;\r\n\r\nexport default treeBuilder;\r\n"],"names":[],"mappings":"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"}